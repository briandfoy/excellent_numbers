#!perl
use v5.22;

use FindBin;
use lib "$FindBin::Bin/../lib";

use Getopt::Long;
use IO::Interactive qw(interactive);
use Net::Twitter;

use ExcellentNumber qw(is_excellent);


my %Options;
GetOptions(
	'dry-run|n' => \$Options{dry_run},
	);

my $file = "$FindBin::Bin/../excellent.txt";
open my $fh, '<:utf8', $file
	or die "Could not open $file: $!";
my @numbers = <$fh>;
close $fh;
chomp @numbers;
my %numbers = map { $_, undef } @numbers;

say { interactive } "There are " . @numbers . " listed excellent numbers";

my $nt = Net::Twitter->new(
	traits   => [qw/OAuth API::RESTv1_1/],
	map { $_ => $ENV{"excellent_twitter_$_"} || die "ENV excellent_twitter_$_ not set" }
		qw(
			consumer_secret
			consumer_key
			access_token
			access_token_secret
			)
	);

my $statuses = $nt->user_timeline({
	count       => 300,
	screen_name => 'excellent_nums',
	});

say { interactive } "There are " . @$statuses . " previously tweeted excellent numbers";

my %tweets;
foreach my $status ( @$statuses ) {
	my( $number ) = $status->{text} =~ m/(\d+)/;
	warn "[$number] has more than one tweet!\n" if exists $tweets{$number};
	$tweets{$number} = undef;
	unless( is_excellent( $number ) ) {
		warn "Tweet for [$number] is an unexcellent error\n";
		}
	delete $numbers{$number};
	}

foreach my $number ( keys %numbers ) {
	unless( is_excellent( $number ) ) {
		warn "[$number] in file is an unexcellent error\n";
		next;
		}
	warn "[$number] has not been tweeted\n";
	say { interactive } "Tweeting $number";
	if( length $number < 30 ) {
		say { interactive } "Skipping $number because it's too low";
		next;
		}
	}
	$nt->update( "$number is excellent" ) unless $Options{dry_run};

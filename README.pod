=encoding utf8

=head1 Excellent Numbers

A seemingly useless number theory problem wastes so much time, but
is so much fun! I want to compute very large "Excellent Numbers".

A number I<ab> is excellent if I<b²> - I<a²> is the number I<ab>,
where I<a> and I<b> have an equal number of digits. For instance, 48
is 8² - 4².

=head2 The Numbers

I'm currently working on the 30-digit numbers. So far:

	[2 digits]
	48

	[4 digits]
	3468

	[6 digits]
	140400
	190476
	216513
	300625
	334668
	416768
	484848
	530901

	[8 digits]
	16604400
	33346668
	59809776

	[10 digits]
	3333466668
	4848484848
	4989086476

	[12 digits]
	101420334225
	181090462476
	238580543600
	243970550901
	268234583253
	274016590848
	320166650133
	333334666668
	346834683468
	400084748433
	440750796876
	502016868353
	569466945388

	[14 digits]
	33333346666668
	48484848484848

	[16 digits]
	1045751633986928
	1140820035650625
	3333333466666668

	[18 digits]
	103495840337945601
	115220484358463728
	134171310390093900
	139601140398860400
	140400140400140400
	146198830409356725
	168654484443958128
	189525190474810476
	190476190476190476
	215488216511784513
	216513216513216513
	225789700526090001
	241951680548171776
	271851166588008693
	299376300623700625
	300625300625300625
	332001666665001333
	333333334666666668
	334668334668334668
	344329484680361873
	415233416766584768
	416768416768416768
	468197520829099776
	483153484846516848
	484848484848484848
	529100530899470901
	530901530901530901
	572945416949321793

	[20 digits]
	21733880705143685100
	22847252005297850625
	23037747345324014028
	23921499005444619376
	24981063345587629068
	26396551105776186476
	31698125906461101900
	33333333346666666668
	34683468346834683468
	35020266906876369525
	36160444847016852753
	36412684107047802476
	46399675808241903600
	46401324208242096401
	48179452108449381525

	[22 digits]
	1283162072038050132225
	1382185301039663949900
	1401308698439970930753
	2178784179051512078476
	2338121616653710361068
	2367149758454106280193
	3333333333466666666668
	3576505852069682460225
	4848484848484848484848

	[24 digits]
	101510361784334387074113
	104809496370340285948725
	104867119466340388354988
	108155856320346198708225
	117348405020362103649776
	119955572010366530914476
	123633057940372717307025
	157290668240426650937601
	158614297300428687290001
	165956011660439883404400
	166044001660440016604400
	185772506140469344148976
	190380966190476052390476
	210517086430504811380725
	233207473870536277166901
	238089296484542932601328
	238470751420543451056401
	243821120534550699427413
	244080746030551050049100
	249488568480558330649600
	262468374516575637057648
	268116781766583098096748
	268391679350583460172501
	274134775984591003089153
	279933548734598578600053
	326675749084658325750768
	326741575916658408409233
	326853064080658548395776
	333200016666666500013333
	333333333334666666666668
	333466683334666833346668
	340007582584674990917568
	362683545166703009885493
	370100219416712091561408
	407651575834757516589333
	415080116584766401735233
	440965427266797129810828
	448806505800806370749376
	448943047484806531405073
	449373011416807037244993
	456713305850815659456876
	457449621834816522980908
	485018201516848681835153
	493193923850858157427500
	493339234266858325599253
	501781323700868081690001
	578571099120955675476225
	579021625716956183909488
	588395216966966749268588
	597902255980977440209776
	598097765980977659809776

	[26 digits]
	17496568697344534078501653
	33333333333346666666666668
	47509369642848371425904913
	48484848484848484848484848
	55969768436669343228469068

	[28 digits]
	1315845549751638587439677073
	1972326939807048593562285100
	2358780406696653992267107413
	2539184952978056426332288401
	2660246258358458033932090368
	2976742514109062151766778101
	3119882136462063978501006225
	3333333333333466666666666668
	3468346834683468346834683468
	3555684841116069426034814400
	3831417624521072796934865900
	4038515677201675295926614273
	4266805990944078021595262976
	4690875838726683013899150453
	5131073116985088112792772501
	5742239882566695076662591093
	5824675383423496007081591148

	[30 digits]
	100219055314266332058600795628
	100416430049416332415236523968
	100767042979370333048104528725
	100840912601660333181335395601
	107689478275016345378780480448
	108232034753680346332510891776
	114992199473650358071788072501
	115047400926516358166588875153
	115321126280716358636429336688
	115898438479084359626037045393
	122859766258084371421981609968
	137365207297400395264983869376
	137531444349620395532985393776
	137770493634510395918176585525
	145202538234220407782191057776
	152490037129016419217423961153
	152666345809916419491786514193
	159506683799284430057049675888
	160474008440734431539008463628
	167008022669734441474463933973
	167515411417850442240686143125
	167701401065630442521367828725
	181824276426984463556192845248
	189525189525190474810474810476
	189730022102166475107886052268
	189739524397834475121680747733
	197599659232660486462007315601
	204540163919780496363619311600
	211744385176120506537333105600
	212049521090240506965995393025
	234180293398660537606457564400
	241988363939584548221426270208
	242235831841360548556314401025
	263581229258420577110295936401
	263596816955166577130920038133
	270960071811966586838506173813
	279293208849266597744013235253
	285944857135850606390401027500
	293255131964810615835777126101
	300625300625300625300625300625
	301284650071834626144624220908
	316254424953400645190891330625
	323557615034584654405948384833
	331301388033520664124986539776
	345751183198380682125401873776
	353152507104880691280840454401
	353464543825984691665907478528
	367431742678766708828489979573
	367729831144466709193245778613
	390079167642484736370100337553
	390513088117410736894537982476
	390743393375666737172837835468
	420318014687166772648204655733
	434410917820570789381886885100
	449392821122640807060548409601
	456892774084150815869953543125
	457103482621166816117072757068
	465120783916810825504771366101
	472398364506966834001546338988
	479705795407160842510205014976
	501422003096000867667003109376
	530901530901530901530901530901
	531043801937260901693585156976
	545838624410716918574127824913
	554259945841660928150867804400
	560820773750180935596448272401
	561113176880916935927974873233
	561664678558210936553196405900
	568842683701750944682318296876
	582947591728084960612037416593
	598121763808484977686763820528
	605200246931516985630552396528
	605350277812100985798781019376
	605614731927416986095297349568

=head1 Contributors

=over 4

=item * Mark Jason Dominus presented the problem and same the initial optimization I came up with

=item * Joe Zbiciak contributed the modulus congruence optimization

=item * Phil Doroff from ServerCentral provided a fat box with 80 CPUs so I could run the 30 digit list in a reasonable time.

=back

=head2 Other Readings

=over 4

=item * L<Computing excellent numbers|http://www.masteringperl.org/2015/05/computing-excellent-numbers/>

=item * L<Doing less work to compute excellent numbers|http://www.masteringperl.org/2015/10/doing-less-work-to-compute-excellent-numbers/>

=item * L<Excellent Numbers|http://blog.plover.com/math/excellent.html>

=item * L<The "excellent numbers" tag at Mastering Perl|http://www.masteringperl.org/tag/excellent-numbers/>

=item * L<484848 is excellent|http://blog.plover.com/math/484848.html>

=item * L<The Online Encyclopedia of Integer Sequences, A162700|https://oeis.org/A162700>

They only have 25 entries. I would add more but they don't like my
name. If someone wants to add them, you can do that.

=back
